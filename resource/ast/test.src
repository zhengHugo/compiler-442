// ====== struct declarations ====== //
struct POLYNOMIAL {
	public func evaluate(x: float) -> float;
};

struct LINEAR inherits POLYNOMIAL {
	private let a: float;
	private let b: float;
	public  func build(A: float, B: float) -> LINEAR;
	public  func evaluate(x: float) -> float;
};

struct QUADRATIC inherits POLYNOMIAL {
	private let a: float;
	private let b: float;
	private let c: float;
	public  func build(A: float, B: float, C: float) -> QUADRATIC;
	public  func evaluate(x: float) -> float;
};

// ====== struct implementations ====== //
impl POLYNOMIAL {
  func evaluate(x: float) -> float
  {
    return (0);
  }
}

impl QUADRATIC {
  func evaluate(x: float) -> float
  {
    let result: float;
    //Using Horner's method
    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  func build(A: float, B: float, C: float) -> QUADRATIC
  {
    let new_function: QUADRATIC ;
    new_function.a = A;
    new_function.b = B;
    new_function.c = C;
    return (new_function);
  }
}

impl LINEAR {
  func build(A: float, B: float) -> LINEAR
  {
    let new_function: LINEAR;
    new_function.a = A;
    new_function.b = B;
    return (new_function);
  }
  func evaluate(x: float) -> float
  {
    let result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
}


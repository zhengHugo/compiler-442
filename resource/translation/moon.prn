MOON listing of test.m.

    1     0            entry      % =====program entry=====
    2     0            align      % following instructions align
    3     0            addi       r14, r0, topaddr    % stack pointer
    4     4            addi       r12, r0, topaddr    % frame pointer
    5     8            subi       r14, r14, 20
    6    12            subi       r14, r14, 4
    7    16            addi       r1, r0, 3
    8    20            sw         -24(r12), r1
    9    24            lw         r1, -24(r12)
   10    28            addi       r2, r0, 20
   11    32            subi       r14, r14, 4
   12    36            addi       r4, r0, 2
   13    40            sw         -28(r12), r4
   14    44            lw         r3, -28(r12)
   15    48            muli       r3, r3, 4
   16    52            sub        r3, r2, r3
   17    56            sub        r4, r12, r3
   18    60            sw         0(r4), r1
   19    64            subi       r14, r12, 20
   20    68            subi       r14, r14, 4
   21    72            addi       r1, r0, 4
   22    76            sw         -24(r12), r1
   23    80            lw         r1, -24(r12)
   24    84            addi       r3, r0, 20
   25    88            subi       r14, r14, 4
   26    92            addi       r5, r0, 3
   27    96            sw         -28(r12), r5
   28   100            lw         r2, -28(r12)
   29   104            muli       r2, r2, 4
   30   108            sub        r2, r3, r2
   31   112            sub        r5, r12, r2
   32   116            sw         0(r5), r1
   33   120            subi       r14, r12, 20
   34   124            subi       r14, r14, 4
   35   128            addi       r2, r0, 20
   36   132            subi       r14, r14, 4
   37   136            addi       r6, r0, 2
   38   140            sw         -28(r12), r6
   39   144            lw         r3, -28(r12)
   40   148            muli       r3, r3, 4
   41   152            sub        r3, r2, r3
   42   156            sub        r6, r12, r3
   43   160            lw         r3, 0(r6)
   44   164            sw         -24(r12), r3
   45   168            % load var to print into param reg 
   46   168            lw         r1, -24(r12)
   47   172            sw         -8(r14), r1
   48   176            % load the buffer pointer into param reg 
   49   176            addi       r1, r0, buf
   50   180            sw         -12(r14), r1
   51   184            % call intstr to convert int to str 
   52   184            jl         r15, intstr
   53   188            % load the result into param reg 
   54   188            sw         -8(r14), r13
   55   192            jl         r15, putstr
   56   196            subi       r14, r14, 4
   57   200            addi       r6, r0, 20
   58   204            subi       r14, r14, 4
   59   208            addi       r7, r0, 3
   60   212            sw         -36(r12), r7
   61   216            lw         r2, -36(r12)
   62   220            muli       r2, r2, 4
   63   224            sub        r2, r6, r2
   64   228            sub        r7, r12, r2
   65   232            lw         r2, 0(r7)
   66   236            sw         -32(r12), r2
   67   240            % load var to print into param reg 
   68   240            lw         r1, -32(r12)
   69   244            sw         -8(r14), r1
   70   248            % load the buffer pointer into param reg 
   71   248            addi       r1, r0, buf
   72   252            sw         -12(r14), r1
   73   256            % call intstr to convert int to str 
   74   256            jl         r15, intstr
   75   260            % load the result into param reg 
   76   260            sw         -8(r14), r13
   77   264            jl         r15, putstr
   78   268            hlt        % =====end of program====
   79   272 buf        res        32 % reserve a buffer used by intstr

MOON listing of lib.m.

    1   304 % A Simple MOON Library
    2   304 % Author: Peter Grogono
    3   304 % Last modified: 27 Jan 1995
    4   304 
    5   304 % Conventions
    6   304 %   r14 is the Stack Pointer
    7   304 %   -4(r14) is used to store the link, if necessary.
    8   304 %   -8(r14) contains the first argument.
    9   304 %   -12(r14) contains the second argument, and so on.
   10   304 %   r15 contains the link.
   11   304 %   r13 contains the result of a function.
   12   304 
   13   304 %   Strings are null terminated.  Strings are passed and returned to
   14   304 %   library functions as pointers.  It is the caller's responsibility to
   15   304 %   provide storage for strings.
   16   304 
   17   304 %   "->" is read "points to".
   18   304 
   19   304           align               % In case previous file misaligned
   20   304 
   21   304 % Write a string to stdout.
   22   304 % Entry: -8(r14) -> string argument.
   23   304 
   24   304 putstr    lw    r1,-8(r14)    % i := r1
   25   308           addi  r2,r0,0
   26   312 putstr1   lb    r2,0(r1)      % ch := B[i]
   27   316           ceqi  r3,r2,0
   28   320           bnz   r3,putstr2    % branch if ch = 0
   29   324           putc  r2
   30   328           addi  r1,r1,1       % i++
   31   332           j     putstr1
   32   336 putstr2   jr    r15
   33   340 
   34   340 % Read a string from stdin.  Read until CR (ASCII 13) but do not store
   35   340 % the CR.
   36   340 % Entry: -8(r14) -> buffer.
   37   340 
   38   340 getstr    lw    r1,-8(r14)    % i := r1
   39   344 getstr1   getc  r2            % get ch
   40   348           ceqi  r3,r2,10
   41   352           bnz   r3,getstr2    % branch if ch = CR
   42   356           sb    0(r1),r2      % B[i] := ch
   43   360           addi  r1,r1,1       % i++
   44   364           j     getstr1
   45   368 getstr2   sb    0(r1),r0      % B[i] := '\0'
   46   372           jr    r15
   47   376 
   48   376 % Convert string to integer.  Skip leading blanks.  Accept leading sign.
   49   376 % Entry: -8(r14) -> string.
   50   376 % Exit:  result in r13
   51   376 
   52   376 strint    addi  r13,r0,0      % R := 0 (result)
   53   380           addi  r4,r0,0       % S := 0 (sign)
   54   384           lw    r1,-8(r14)    % i := r1
   55   388           addi  r2,r0,0
   56   392 strint1   lb    r2,0(r1)      % ch := B[i]
   57   396           cnei  r3,r2,32
   58   400           bnz   r3,strint2    % branch if ch != blank
   59   404           addi  r1,r1,1
   60   408           j     strint1
   61   412 strint2   cnei  r3,r2,43
   62   416           bnz   r3,strint3    % branch if ch != "+"
   63   420           j     strint4
   64   424 strint3   cnei  r3,r2,45
   65   428           bnz   r3,strint5    % branch if ch != "-"
   66   432           addi  r4,r4,1       % S := 1
   67   436 strint4   addi  r1,r1,1       % i++
   68   440           lb    r2,0(r1)      % ch := B[i]
   69   444 strint5   clti  r3,r2,48
   70   448           bnz   r3,strint6    % branch if ch < "0"
   71   452           cgti  r3,r2,57
   72   456           bnz   r3,strint6    % branch if ch > "9"
   73   460           subi  r2,r2,48      % ch -= "0"
   74   464           muli  r13,r13,10    % R *= 10
   75   468           add   r13,r13,r2    % R += ch
   76   472           j     strint4
   77   476 strint6   ceqi  r3,r4,0
   78   480           bnz   r3,strint7    % branch if S = 0
   79   484           sub   r13,r0,r13    % R := -R
   80   488 strint7   jr    r15
   81   492 
   82   492 % Convert signed integer to string.
   83   492 % Entry: -8(r14) is the integer.
   84   492 %        -12(r14) -> buffer containing at least 12 bytes.
   85   492 % Exit:  r13 -> first character of result string.
   86   492 
   87   492 intstr    lw    r13,-12(r14)
   88   496           addi  r13,r13,11    % r13 points to end of buffer
   89   500           sb    0(r13),r0     % store terminator
   90   504           lw    r1,-8(r14)    % r1 := N (to be converted)
   91   508           addi  r2,r0,0       % S := 0 (sign)
   92   512           cgei  r3,r1,0
   93   516           bnz   r3,intstr1    % branch if N >= 0
   94   520           addi  r2,r2,1       % S := 1
   95   524           sub   r1,r0,r1      % N := -N
   96   528 intstr1   addi  r3,r1,0       % D := N (next digit)
   97   532           modi  r3,r3,10      % D mod= 10
   98   536           addi  r3,r3,48      % D += "0"
   99   540           subi  r13,r13,1     % i--
  100   544           sb    0(r13),r3     % B[i] := D
  101   548           divi  r1,r1,10      % N div= 10
  102   552           cnei  r3,r1,0
  103   556           bnz   r3,intstr1    % branch if N != 0
  104   560           ceqi  r3,r2,0
  105   564           bnz   r3,intstr2    % branch if S = 0
  106   568           subi  r13,r13,1     % i--
  107   572           addi  r3,r0,45
  108   576           sb    0(r13),r3     % B[i] := "-"
  109   580 intstr2   jr    r15
  110   584 
  111   584 % Return length of string.
  112   584 % Entry: -8(r14) -> string.
  113   584 % Exit:  r13 = length of string.
  114   584 
  115   584 lenstr   lw    r1,-8(r14)     % i -> string
  116   588          addi  r13,r0,0       % L := 0
  117   592          addi  r2,r0,0
  118   596 lenstr1  lb    r2,0(r1)       % ch := B[i]
  119   600          ceqi  r3,r2,0
  120   604          bnz   r3,lenstr2     % branch if ch = 0
  121   608          addi  r13,r13,1      % L++
  122   612          addi  r1,r1,1        % i++
  123   616          j     lenstr1
  124   620 lenstr2  jr    r15
  125   624 
  126   624 % Concatenate strings: Z := X + Y.
  127   624 % Entry:   -8(r14)  ->  X
  128   624 %         -12(r14)  ->  Y
  129   624 %         -16(r14)  ->  Z
  130   624 % The result string is assumed to be large enough to hold the result.
  131   624 
  132   624 strcat   lw    r1,-16(r14)    % r1 -> Z
  133   628          lw    r2,-8(r14)     % r2 -> X
  134   632          addi  r3,r0,0        % r3 = current character
  135   636 strcat1  lb    r3,0(r2)       % char from X
  136   640          ceqi  r4,r3,0
  137   644          bnz   r4,strcat2     % branch at end of X
  138   648          sb    0(r1),r3       % copy char to Z
  139   652          addi  r1,r1,1
  140   656          addi  r2,r2,1
  141   660          j     strcat1
  142   664 strcat2  lw    r2,-12(r14)    % r2 -> Y
  143   668 strcat3  lb    r3,0(r2)       % char from Y
  144   672          ceqi  r4,r3,0
  145   676          bnz   r4,strcat4     % branch at end of Y
  146   680          sb    0(r1),r3       % copy char to Z
  147   684          addi  r1,r1,1
  148   688          addi  r2,r2,1
  149   692          j     strcat3
  150   696 strcat4  sb    0(r1),r0       % Store terminator
  151   700          jr    r15
  152   704 
  153   704 % The string comparison functions all use strcmp, defined below.
  154   704 % They are all short; a smart compiler could generate this code
  155   704 % directly, avoiding the overhead of an extra level of function
  156   704 % call.
  157   704 % For each function:
  158   704 % Entry: -8(r14)  -> string A
  159   704 %        -12(r14) -> string B
  160   704 % Exit:  r13 = 1 for true and 0 for false.
  161   704 % Note that r11 is used for the link to avoid saving r15.
  162   704 
  163   704 streq    jl    r11,strcmp
  164   708          lw    r13,eq(r13)
  165   712          jr    r15
  166   716 eq       dw    1,0,0
  167   728 
  168   728 strne    jl    r11,strcmp
  169   732          lw    r13,ne(r13)
  170   736          jr    r15
  171   740 ne       dw    0,1,1
  172   752 
  173   752 strlt    jl    r11,strcmp
  174   756          lw    r13,lt(r13)
  175   760          jr    r15
  176   764 lt       dw    0,1,0
  177   776 
  178   776 strle    jl    r11,strcmp
  179   780          lw    r13,le(r13)
  180   784          jr    r15
  181   788 le       dw    1,1,0
  182   800 
  183   800 strgt    jl    r11,strcmp
  184   804          lw    r13,gt(r13)
  185   808          jr    r15
  186   812 gt       dw    0,0,1
  187   824 
  188   824 strge    jl    r11,strcmp
  189   828          lw    r13,ge(r13)
  190   832          jr    r15
  191   836 ge       dw    1,0,1
  192   848 
  193   848 % Compare strings.
  194   848 % Entry: -8(r14)  -> string A
  195   848 %        -12(r14) -> string B
  196   848 %             ( 0   if A = B
  197   848 % Exit: r13 = < 4   if A < B
  198   848 %             ( 8   if A > B
  199   848 % Note that r11 is the link.
  200   848 
  201   848 strcmp   lw    r1,-8(r14)
  202   852          lw    r2,-12(r14)
  203   856          addi  r3,r0,0
  204   860          addi  r4,r0,0
  205   864 strcmp1  lb    r3,0(r1)       % get A[i]
  206   868          lb    r4,0(r2)       % get B[j]
  207   872          ceqi  r5,r3,0
  208   876          bnz   r5,strcmp2     % branch if end of A
  209   880          ceqi  r5,r4,0
  210   884          bnz   r5,strcmp4     % branch if end of B
  211   888          ceq   r5,r3,r4
  212   892          bz    r5,strcmp3     % branch if A[i] != B[i]
  213   896          addi  r1,r1,1        % i++
  214   900          addi  r2,r2,1        % j++
  215   904          j     strcmp1
  216   908 strcmp2  ceqi  r5,r4,0
  217   912          bz    r5,strcmp5     % branch if not end of B
  218   916          addi  r13,r0,0       % A = B
  219   920          jr    r11
  220   924 strcmp3  clt   r5,r3,r4
  221   928          bnz   r5,strcmp5     % branch if A[i] < B[i]
  222   932 strcmp4  addi  r13,r0,8       % A > B
  223   936          jr    r11
  224   940 strcmp5  addi  r13,r0,4       % A < B
  225   944          jr    r11
  226   948 
  227   948 % String indexing: return the string S[M].  The value is returned as a
  228   948 % string rather than as a character for compatibility with other string
  229   948 % processing functions.  Also, we must distinguish the empty string
  230   948 % from a character.
  231   948 % Entry: -8(r14)  -> S
  232   948 %        -12(r14) -> M
  233   948 %        -16(r14) -> T, the output string.
  234   948 % Exit:  the output string contains the selected character, or is null.
  235   948 
  236   948 stridx   lw    r1,-8(r14)    % i
  237   952          lw    r2,-12(r14)
  238   956          lw    r3,-16(r14)
  239   960          subi  r2,r2,1
  240   964          addi  r4,r0,0
  241   968 stridx1  lb    r4,0(r1)      % ch := S[i]
  242   972          ceqi  r5,r4,0
  243   976          bnz   r5,stridx3    % branch if ch = 0
  244   980          cge   r5,r1,r2
  245   984          bnz   r5,stridx2    % branch if i >= M
  246   988          addi  r1,r1,1       % i++
  247   992          j     stridx1
  248   996 stridx2  sb    0(r3),r4      % T[0] := S[M]
  249  1000          addi  r3,r3,1
  250  1004 stridx3  sb    0(r3),r0      % T[k] := 0
  251  1008          jr    r15
  252  1012 
  253  1012 % String indexing: return the string S[M..N].
  254  1012 % Entry: -8(r14)  -> S
  255  1012 %        -12(r14) -> M
  256  1012 %        -16(r14) -> N
  257  1012 %        -20(r14) -> T, the output string.
  258  1012 % Exit:  the output string contains the selected substring, or is null.
  259  1012 
  260  1012 strsub   lw    r1,-8(r14)
  261  1016          lw    r2,-12(r14)
  262  1020          lw    r3,-16(r14)
  263  1024          lw    r4,-20(r14)
  264  1028          subi  r2,r2,1
  265  1032          subi  r3,r3,1
  266  1036          addi  r5,r0,0
  267  1040 strsub1  lb    r5,0(r1)      % ch := S[i]
  268  1044          ceqi  r6,r5,0
  269  1048          bnz   r6,strsub3    % branch if ch = 0
  270  1052          clt   r6,r1,r2
  271  1056          bnz   r6,strsub2    % branch if i < M
  272  1060          cgt   r6,r1,r3
  273  1064          bnz   r6,strsub3    % branch if i > N
  274  1068          sb    0(r3),r5      % T[k] := S[i]
  275  1072          addi  r3,r3,1       % k++
  276  1076 strsub2  addi  r1,r1,1       % i++
  277  1080          j     strsub1
  278  1084 strsub3  sb    0(r3),r0      % T[k] := 0
  279  1088          jr    r15
  280  1092 

